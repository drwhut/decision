> This function version of Factorial uses recursion.
[Function(FactorialFunction, "Calculate the factorial of a number using recursion.")]
[FunctionInput(FactorialFunction, n, Integer, 0)]
[FunctionOutput(FactorialFunction, n_factorial, Integer, "The factorial of n, n!")]

Define(FactorialFunction)~#1
LessThanOrEqual(#1, 1)~#2

Subtract(#1, 1)~#3
FactorialFunction(#3)~#4
Multiply(#1, #4)~#5 > n * FactorialFunction(n - 1)

Ternary(#2, 1, #5)~#6
Return(FactorialFunction, #6)

> This subroutine version of Factorial uses iteration.
[Subroutine(FactorialSubroutine, "Calculate the factorial of a number using iteration.")]
[FunctionInput(FactorialSubroutine, n, Integer, 0)]
[FunctionOutput(FactorialSubroutine, n_factorial, Integer, "The factorial of n, n!")]

[Variable(_fac, Integer, 1)]

Define(FactorialSubroutine)~#10, #11
Set(_fac, #10, 1)~#12

For(#12, 2, #11, 1)~#13, #14, #15
_fac~#16
Multiply(#16, #14)~#17
Set(_fac, #13, #17)

Return(FactorialSubroutine, #15, #16)

> Using the Factorial function and subroutine.
Start~#100
FactorialFunction(5)~#101
Print(#100, #101)~#102

FactorialSubroutine(#102, 10)~#103, #104
Print(#103, #104)